//Creating the Person classmodel.Person = new DataClass("People");//Add Sponsor attributes.model.Person.ID = new Attribute("storage", "uuid", "key auto");model.Person.firstName = new Attribute("storage", "string");model.Person.lastName = new Attribute("storage", "string", "btree");model.Person.fullName = new Attribute("calculated", "string");model.Person.email = new Attribute("storage", "string");model.Person.loginCode = new Attribute("storage", "string", "btree");model.Person.attendeeNumber = new Attribute("storage", "string");//login stuffmodel.Person.password = new Attribute("calculated", "string");model.Person.HA1Key = new Attribute("storage", "string", "btree");//Interest realation attr.model.Person.interestCollection = new Attribute("relatedEntities", "Interest", "person", {reversePath:true});model.Person.prizes = new Attribute("relatedEntities", "Winner", "person", {reversePath:true});//Calculated Attributes.model.Person.fullName.onGet = function() {	return this.firstName + " " + this.lastName; };model.Person.password.onGet = function() {	return "*****"; //could also return Null.};model.Person.password.onSet = function(value) {	this.HA1Key = directory.computeHA1(this.ID, value);};//Entity methods.model.Person.entityMethods = {};model.Person.entityMethods.validatePassword = function(password){	var ha1 = directory.computeHA1(this.ID, password);	return (ha1 === this.HA1Key); //true if validated, false otherwise.};//Class methods.model.Person.methods = {};model.Person.methods.addNewPerson = function(personObj) {	var theRequestor = ds.Person({email: personObj.email});		if (theRequestor !== null) {		return "This email address already exists in our datastore.";			} else {		var newPerson = new ds.Person();		newPerson.attendeeNumber 	= personObj.attendeeNumber;		newPerson.firstName 		= personObj.firstName;		newPerson.lastName 			= personObj.lastName;		newPerson.email 			= personObj.email;				//Let's generate the password and send it to them.		var thePassword 			= require('utils').generatePassword(); 		newPerson.password  		= thePassword;		//newPerson.loginCode  		= thePassword; //Just for now so I can see the passwords. Repurpose it later. Oct 11, 2013		//Pass the info to our email daemon so it can send the password to our new user.		var theEmailWorker = new SharedWorker("Workers/emailDaemon.js", "emailDaemon"),		thePort = theEmailWorker.port; // MessagePort to communicate with the email shared worker.		thePort.postMessage({what: 'sendNewPassword', email: newPerson.email, recipient: newPerson.email, password: thePassword});				//Generate the Interest entities for this new Person.		var sponsors = ds.Sponsor.all();		sponsors.forEach(function(sponsor) {		new ds.Interest({			hire: false,			info: false,			person: newPerson,			sponsor: sponsor		}).save();	});				newPerson.save();		return personObj.firstName + " " + personObj.lastName + " has been added.";	}	}; //end - addNewPerson().model.Person.methods.resetPassword = function(email) {	var theRequestor = ds.Person({email: email});	//debugger;	if (theRequestor === null) {		return "We could not find your email address.";	}		if (theRequestor.email === email) {		var theEmailWorker = new SharedWorker("Workers/emailDaemon.js", "emailDaemon"),		thePort = theEmailWorker.port, // MessagePort to communicate with the email shared worker.		thePassword 			= require('utils').generatePassword(); //Let's generate the password and send it to them.				theRequestor.password  		= thePassword;		theRequestor.loginCode  	= thePassword; //Just for now so I can see the passwords. Repurpose it later. Oct 11, 2013		theRequestor.save();		//Pass the info to our email daemon so it can send the password to our new user.		thePort.postMessage({what: 'sendNewPassword', email: theRequestor.email, recipient: theRequestor.email, password: thePassword, userID: theRequestor.ID});		return "You're new password has been sent. Please check your email."	}	return theRequestor;	//return email + " this is just a test of the server class method - resetPassword.";}; //end - resetPassword().model.Person.methods.addNewPerson.scope = "public";model.Person.methods.resetPassword.scope = "public";